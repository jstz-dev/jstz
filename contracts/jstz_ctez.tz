{ parameter
    (or (pair %transfer (address %from) (address %to) (nat %value))
        (pair %mint (int %quantity) (address %target))) ;
  storage (pair (big_map %tokens address nat) (address %admin)) ;
  code { LAMBDA
           (pair (pair (big_map address nat) address) address)
           nat
           { UNPAIR ; CAR ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (pair (big_map address nat) address) address nat)
           (pair (big_map address nat) address)
           { UNPAIR 3 ;
             PUSH nat 0 ;
             DUP 4 ;
             COMPARE ;
             EQ ;
             IF { SWAP ; DIG 2 ; DROP 2 }
                { DUP ; CAR ; DIG 3 ; SOME ; DIG 3 ; UPDATE ; UPDATE 1 } } ;
         DIG 2 ;
         UNPAIR ;
         IF_LEFT
           { DUP ;
             CAR ;
             DUP 3 ;
             PAIR ;
             DUP 5 ;
             SWAP ;
             EXEC ;
             DUP 2 ;
             GET 4 ;
             SWAP ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH string "Balance underflow" ; FAILWITH } {} ;
             DUP 2 ;
             CAR ;
             DIG 3 ;
             PAIR 3 ;
             DUP 3 ;
             SWAP ;
             EXEC ;
             DUP 2 ;
             GET 3 ;
             DUP 2 ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUP 3 ;
             GET 4 ;
             ADD ;
             DIG 2 ;
             GET 3 ;
             DIG 2 ;
             PAIR 3 ;
             EXEC }
           { DUP ;
             CDR ;
             DUP 3 ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUP 2 ;
             CAR ;
             ADD ;
             ISNAT ;
             IF_NONE { PUSH string "Balance underflow" ; FAILWITH } {} ;
             SWAP ;
             CDR ;
             DIG 2 ;
             PAIR 3 ;
             EXEC } ;
         NIL operation ;
         PAIR } }

