name: Deploy prod docs

on:
  push:
    tags:
      - "*"

  # In case we want to deploy cherrypicked changes, e.g. hot fixes for docs before the next release
  workflow_dispatch:
    inputs:
      ref:
        description: "ref (branch, tag, or SHA) that will be used to build docs"
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  set-ref:
    name: Set ref for workflows triggered by tags
    runs-on: ubuntu-latest
    outputs:
      target_ref: ${{ steps.run.outputs.TARGET_REF }}
    steps:
      - id: run
        run: |
          input_ref=${{ inputs.ref }}
          trigger_ref=${{ github.ref }}
          ref=${input_ref:-"$trigger_ref"}
          echo "TARGET_REF=${ref:-"main"}" >> ${GITHUB_OUTPUT}

  build:
    runs-on: ubuntu-latest
    needs: [set-ref]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.set-ref.outputs.target_ref }}
          fetch-depth: 0 # Not needed if lastUpdated is not enabled
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: |
          npm run docs:build
          touch docs/build/.nojekyll
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_PRODUCTION_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_PRODUCTION_SECRET }}
          aws-region: eu-west-1
      - name: Upload to AWS
        run: aws s3 sync ./docs/build ${{ secrets.AWS_S3_PRODUCTION_PATH }} --delete
      - name: Invalidate AWS cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_PRODUCTION }} --paths '/*'
