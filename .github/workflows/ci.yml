name: Continuous Integration & Deployment

on:
  pull_request:
  push:
    branches: [main]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_BASE: trilitech
  NETWORK: nairobinet
  JSTZ_ROLLUP_BRIDGE_ADDRESS: KT1WVsN9Rd4v9EiZ9uunyrVAwDucKXqHv3Fy

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: wagoid/commitlint-github-action@v5
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rust setup
        run: rustup show active-toolchain

      - name: Lint with Clippy
        run: make lint
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rust setup
        run: rustup show active-toolchain

      - uses: luisnquin/setup-alejandra@v1.0.0

      - name: Format (rustfmt)
        run: make fmt-rust-check

      - name: Format (prettier)
        run: npx prettier --check .

      - name: Format (Nix)
        run: make fmt-nix-check

  build:
    name: Build (Cargo)
    runs-on: ubuntu-latest
    needs: [lint, fmt]
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2.7.1

      - name: Rust setup
        run: rustup show active-toolchain

      - name: Build
        run: cargo build

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [lint, fmt]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Configure npm cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Build with VitePress
        run: npm run docs:build

  build-sdk:
    name: Build TypeScript SDK
    runs-on: ubuntu-latest
    needs: [lint, fmt]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Configure npm cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Build
        run: cd packages/jstz && npm run build

  build-nix:
    name: Build (Nix)
    runs-on: ubuntu-latest
    needs: [build, build-sdk, build-docs]
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v13
        with:
          name: trilitech-jstz
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build Shell
        run: nix develop --command bash -c "echo 'Hello World'"

      - name: Build
        run: nix build -j auto

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel
          path: result/lib/jstz_kernel.wasm

  build-docker:
    name: Build (Docker)
    runs-on: ubuntu-latest
    needs: [build, build-sdk, build-docs]
    outputs:
      jstz-rollup: ${{ steps.tags.outputs.tag || '' }}
    strategy:
      matrix:
        include:
          - dockerfile: ./crates/jstz_rollup/Dockerfile
            image: jstz-rollup
            # TODO: Figure out a way to access the global env vars in a matrix
            build-args: |
              OCTEZ_TAG=v18.1
              OCTEZ_PROTO=PtNairob
              JSTZ_ROLLUP_BRIDGE_ADDRESS=KT1WVsN9Rd4v9EiZ9uunyrVAwDucKXqHv3Fy
          - dockerfile: ./crates/jstz_node/Dockerfile
            image: jstz-node
            build-args: ""
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_BASE }}/${{ matrix.image }}
      - # Extract tags for jstz-rollup
        run: echo "tag=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
        id: tags
        if: matrix.image == 'jstz-rollup'
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          build-args: ${{ matrix.build-args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-rollup:
    # We only want to deploy the rollup when a PR is merged or a push to main happens
    if: (github.event_name == 'pull_request' && github.event.pull_request.draft == false) || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: Deploy jstz rollup
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy rollup
        run: |
          ROLLUP_ADDRESS=$(docker run -v "/var/run/docker.sock":"/var/run/docker.sock" \
            -e NETWORK=${{ env.NETWORK }} -e OPERATOR_SK=${{ secrets.JSTZ_ROLLUP_OPERATOR_SK }} -e JSTZ_ROLLUP_BRIDGE_ADDRESS=${{ env.JSTZ_ROLLUP_BRIDGE_ADDRESS }} \
            ${{ needs.build-docker.outputs.jstz-rollup }} \
            deploy |
            grep -oE "sr1[a-zA-Z0-9]{33}" | 
            uniq | 
            tr -d '\n')
          echo "ROLLUP_ADDRESS=${ROLLUP_ADDRESS}" >> $GITHUB_ENV

      - name: Update PR with the deployment link
        if: github.event_name == 'pull_request'
        uses: edumserrano/find-create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: "<!-- pr-rollup-deployment -->"
          comment-author: "github-actions[bot]"
          body: |
            <!-- pr-rollup-deployment -->
            Deployed at [${{ env.ROLLUP_ADDRESS }}](https://${{ env.NETWORK }}.tzkt.io/${{ env.ROLLUP_ADDRESS }})
          edit-mode: replace
          reactions: rocket

      - name: Create GitHub deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: altinukshini/deployment-action@releases/v1
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: ${{ env.NETWORK }}

      - name: Update deployment status
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          environment_url: https://${{ env.NETWORK }}.tzkt.io/${{ env.ROLLUP_ADDRESS }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
